app: serverless-demo
service: serverless-demo
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - 'dynamodb:PutItem'
            - 'dynamodb:Get*'
            - 'dynamodb:Scan*'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: '*'
  region: 'us-east-1'

plugins:
  - serverless-offline

functions:
  createCustomer:
    handler: src/modules/customers/services/CustomerService.createCustomer
    events:
      - httpApi:
          path: /customer
          method: post

  getCustomers:
    handler: src/modules/customers/services/CustomerService.getCustomers
    events:
      - httpApi:
          path: /customer
          method: get

  getCustomersByName:
    handler: src/modules/customers/services/CustomerService.getCustomerByName
    events:
      - httpApi:
          path: /customer/{name}
          method: get

  deleteCustomersByName:
    handler: src/modules/customers/services/CustomerService.deleteCustomer
    events:
      - httpApi:
          path: /customer/{name}
          method: delete

  editCustomersByName:
    handler: src/modules/customers/services/CustomerService.editCustomer
    events:
      - httpApi:
          path: /customer/{name}
          method: put

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: primary_key
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: primary_key
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}
